import java.nio.file.Paths

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.modid

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'

            mods {
                screenshot_viewer {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("mcmod.info") {
        expand "version": project.version
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

java {
    libsDirName = Paths.get(libsDirName).resolve("${project.compatible_mc_version}").toString()
    archivesBaseName = project.modid
    version = version.concat("-${project.mod_loader}-mc${project.compatible_mc_version}")
    withSourcesJar()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : "LGatodu47",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "LGatodu47",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

sourceSets {
    main {
        output.resourcesDir = output.classesDirs.getSingleFile()
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
